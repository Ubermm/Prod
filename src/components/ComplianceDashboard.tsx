//@ts-nocheck
"use client";
import React, { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { generateUUID } from "@/lib/utils";
import { MessageSquare, Search, ArrowRightLeft, Plus, FileText, ChevronDown, ChevronUp, Loader2, AlertCircle, Trash2, ZoomIn, Code, Download } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import { Markdown } from "@/components/markdown";
import MermaidChart from '@/components/MermaidChart';
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { usePathname } from 'next/navigation';

const ComplianceDashboard = () => {
  const router = useRouter();
  const [audits, setAudits] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isFetching, setIsFetching] = useState(false);
  const [openDialog, setOpenDialog] = useState(false);
  const [analysisType, setAnalysisType] = useState("find");
  const [warningLetter, setWarningLetter] = useState("");
  const [warningLetterUrl, setWarningLetterUrl] = useState("");
  const [secondLetterUrl, setSecondLetterUrl] = useState("");
  const [secondLetter, setSecondLetter] = useState("");
  const [expandedAudits, setExpandedAudits] = useState(new Set());
  const [cfrSubsection, setCfrSubsection] = useState("");
  const [correctiveContext, setCorrectiveContext] = useState("");
  const [cfrError, setCfrError] = useState("");
  const [submissionError, setSubmissionError] = useState("");
  const [directiveQuestions, setDirectiveQuestions] = useState([]);
  const [questionAnswers, setQuestionAnswers] = useState([]);
  const [showQuestions, setShowQuestions] = useState(false);
  const [additionalContext, setAdditionalContext] = useState("");
  const [isLoadingQuestions, setIsLoadingQuestions] = useState(false);
  const [showPrologDialog, setShowPrologDialog] = useState(false);
  const [currentPrologCode, setCurrentPrologCode] = useState("");
  const [currentValidationResults, setCurrentValidationResults] = useState("");

  useEffect(() => {
    fetchPreviousAudits();
  }, []);

  const validateCfrFormat = (value) => {
    const cfrRegex = /^\d+\.\d+$/;
    return cfrRegex.test(value);
  };

  const handleCfrInput = (e) => {
    const value = e.target.value;
    setCfrSubsection(value);
    setDirectiveQuestions([]);
    setQuestionAnswers([]);
    
    if (value && !validateCfrFormat(value)) {
      setCfrError("Please enter the CFR subsection in the format 'x.y' (e.g., 211.22)");
    } else {
      setCfrError("");
    }
  };

  const downloadPrologCode = (prologCode, validationResults) => {
    const disclaimer = `
% DISCLAIMER
% This Prolog code was generated by Grimoire.Corp's FDA Compliance Analysis Tool
% 
% THIS CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
% PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL GRIMOIRE.CORP OR ITS
% CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
% OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
% STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
% OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%
% Generated on: ${new Date().toISOString()}
%
`;

    const validationComments = `
% Validation Results:
${validationResults.split('\n').map(line => `% ${line}`).join('\n')}
`;

    const fullContent = `${disclaimer}\n\n${prologCode}\n\n${validationComments}`;
    
    const blob = new Blob([fullContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `compliance_validation_${Date.now()}.pl`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const fetchDirectiveQuestions = async () => {
    if (!validateCfrFormat(cfrSubsection)) {
      setCfrError("Invalid CFR format. Please use the format 'x.y' (e.g., 211.22)");
      return;
    }

    setIsLoadingQuestions(true);
    try {
      const response = await fetch("/api/generate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ 
          cfrSubsection: ("21 CFR " + cfrSubsection.trim()),
          warningLetter,
        }),
      });

      if (response.status === 404) {
        setCfrError("The specified CFR code does not exist. Please check the code and try again.");
        return;
      }

      const data = await response.json();
      setDirectiveQuestions(data.questions);
      setQuestionAnswers(new Array(data.questions.length).fill(""));
      setShowQuestions(true);
    } catch (error) {
      console.error("Error fetching directive questions:", error);
      setSubmissionError("Failed to fetch directive questions. Please try again.");
    } finally {
      setIsLoadingQuestions(false);
    }
  };

  const handleAnswerChange = (index, value) => {
    const newAnswers = [...questionAnswers];
    newAnswers[index] = value;
    setQuestionAnswers(newAnswers);
  };

  const fetchPreviousAudits = async () => {
    try {
      const [findResponse, compareResponse] = await Promise.all([
        fetch("/api/find"),
        fetch("/api/compare"),
      ]);
      
      const findData = await findResponse.json();
      const compareData = await compareResponse.json();
      const allAudits = [
        ...findData.results.map(audit => ({
          ...audit,
          id: audit.id || generateUUID(),
          analysisType: "find",
          timestamp: (new Date(audit.createdAt)).toLocaleString(),
        })),
        ...compareData.results.map(audit => ({
          ...audit,
          id: audit.id || generateUUID(),
          analysisType: "compare",
          timestamp: (new Date(audit.createdAt)).toLocaleString()
        }))
      ].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
      
      setAudits(allAudits);
    } catch (error) {
      console.error("Error fetching previous audits:", error);
    }
  };

  const deleteAudit = async (audit) => {
    try {
      const response = await fetch(`/api/${audit.analysisType}?id=${audit._id}`, {
        method: 'DELETE',
      });
      
      if (response.ok) {
        setAudits(prev => prev.filter(audita => audita._id !== audit._id));
        setExpandedAudits(prev => {
          const newSet = new Set(prev);
          newSet.delete(audit._id);
          return newSet;
        });
      } else {
        console.error('Failed to delete audit');
      }
    } catch (error) {
      console.error('Error deleting audit:', error);
    }
  };

  const fetchWarningLetter = async (url, setContent) => {
    setIsFetching(true);
    try {
      const response = await fetch("/api/scrape", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ url }),
      });
      const data = await response.json();
      setContent(data.content);
    } catch (error) {
      console.error("Error fetching warning letter:", error);
    } finally {
      setIsFetching(false);
    }
  };

  const fetchBothLetters = async () => {
    setIsFetching(true);
    try {
      const [firstResponse, secondResponse] = await Promise.all([
        fetch("/api/scrape", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ url: warningLetterUrl }),
        }),
        fetch("/api/scrape", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ url: secondLetterUrl }),
        })
      ]);
      
      const firstData = await firstResponse.json();
      const secondData = await secondResponse.json();
      
      setWarningLetter(firstData.content);
      setSecondLetter(secondData.content);
    } catch (error) {
      console.error("Error fetching warning letters:", error);
    } finally {
      setIsFetching(false);
    }
  };

  const handleSubmit = async () => {
    setIsLoading(true);
    setSubmissionError("");
    try {
      const id = generateUUID();
      let response;
      let newAudit;
      
      switch (analysisType) {
        case "find":
          response = await fetch("/api/find", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ content: warningLetter }),
          });
          const findData = await response.json();
          newAudit = {
            _id: findData._id,
            id,
            content: warningLetter,
            url: warningLetterUrl,
            results: findData.results,
            summary: findData.summary,
            cfrVisualization: findData.cfrVisualization,
            fdcVisualization: findData.fdcVisualization,
            analysisType: "find",
            timestamp: new Date().toLocaleString()
          };
          break;
        
        case "compare":
          response = await fetch("/api/compare", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              firstLetter: warningLetter,
              secondLetter: secondLetter,
              firstUrl: warningLetterUrl,
              secondUrl: secondLetterUrl
            }),
          });
          const compareData = await response.json();
          newAudit = {
            _id: compareData._id,
            id,
            firstContent: warningLetter,
            firstUrl: warningLetterUrl,
            secondContent: secondLetter,
            secondUrl: secondLetterUrl,
            content: compareData.content,
            cfrVisualization: compareData.cfrVisualization,
            fdcVisualization: compareData.fdcVisualization,
            letterACodes: compareData.letterACodes,
            letterBCodes: compareData.letterBCodes,
            analysisType: "compare",
            timestamp: new Date().toLocaleString()
          };
          break;
      }
      
      setAudits(prev => [newAudit, ...prev]);
      setExpandedAudits(prev => {
        const newSet = new Set(prev);
        newSet.add(id);
        return newSet;
      });
      
      setOpenDialog(false);
      resetForm();
    } catch (error) {
      console.error("Error submitting analysis:", error);
      setSubmissionError("An unexpected error occurred. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const resetForm = () => {
    setWarningLetter("");
    setWarningLetterUrl("");
    setSecondLetter("");
    setSecondLetterUrl("");
    setCfrSubsection("");
    setCorrectiveContext("");
    setDirectiveQuestions([]);
    setQuestionAnswers([]);
    setShowQuestions(false);
    setAdditionalContext("");
    setAnalysisType("find");
  };

  const toggleAudit = (id) => {
    setExpandedAudits(prev => {
      const newSet = new Set(prev);
      if (newSet.has(id)) {
        newSet.delete(id);
      } else {
        newSet.add(id);
      }
      return newSet;
    });
  };

  const renderMermaidChart = (chart, title) => {
    return (
      <div className="mt-4 space-y-2">
        <div className="flex items-center justify-between">
          <h4 className="text-sm font-medium text-white/60">{title}</h4>
          <div className="flex items-center gap-2">
            <Dialog>
              <DialogTrigger asChild>
                <Button variant="outline" size="sm" className="text-white/60 hover:text-white">
                  <ZoomIn className="w-4 h-4" />
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
                <DialogHeader>
                  <DialogTitle>{title}</DialogTitle>
                </DialogHeader>
                <div className="bg-white/5 p-4 rounded">
                  <div className="text-sm text-white/60 mb-4">
                    Click and use your mouse wheel to zoom in/out. The diagram quality will not be affected.
                  </div>
                  <MermaidChart chart={chart} />
                </div>
              </DialogContent>
            </Dialog>
          </div>
        </div>
        <div className="bg-white/5 rounded p-4">
          <MermaidChart chart={chart} />
        </div>
      </div>
    );
  };

  const generateResultKey = (result, index) => {
    const baseKey = result.id || result.url || result.title || `result`;
    return `${baseKey}-${index}-${generateUUID().slice(0, 8)}`;
  };

  const renderFindResults = (audit) => {
  if (!audit?.results?.length && !audit?.summary) {
    return (
      <div className="flex items-center justify-center h-64 text-white/60">
        No results found. Try adjusting your search criteria.
      </div>
    );
  }
  
  return (
    <div className="space-y-6">
      {/* Header with stats */}
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-white">Search Results</h3>
        <span className="text-white/60 text-sm bg-white/5 px-3 py-1 rounded-full">
          {audit.results?.length || 0} warning letters found
        </span>
      </div>
      
      {/* Statistical Summary */}
      {audit.summary && (
        <div className="bg-white/5 rounded-lg p-4">
          <h4 className="text-sm font-semibold text-white/70 mb-3 flex items-center">
            <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
            </svg>
            Statistical Summary
          </h4>
          <Markdown className="prose prose-sm prose-invert max-w-none">{audit.summary}</Markdown>
        </div>
      )}
  
      {/* Visualizations - side by side if both exist */}
      {(audit.cfrVisualization || audit.fdcVisualization) && (
        <div className={`${audit.cfrVisualization && audit.fdcVisualization ? 'grid grid-cols-1 lg:grid-cols-2 gap-6' : ''}`}>
          {audit.cfrVisualization && renderMermaidChart(audit.cfrVisualization, "Co-occurring CFR Violations")}
          {audit.fdcVisualization && renderMermaidChart(audit.fdcVisualization, "Co-occurring FD&C Act Violations")}
        </div>
      )}
  
      {/* Results List */}
      {Array.isArray(audit.results) && audit.results.length > 0 && (
        <div className="space-y-3">
          <h4 className="text-sm font-semibold text-white/70 flex items-center">
            <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
            </svg>
            Matching Warning Letters
          </h4>
          
          <div className="bg-white/5 rounded-lg overflow-hidden">
            {/* Table header */}
            <div className="grid grid-cols-12 gap-3 p-3 bg-white/10 text-xs font-medium text-white/80">
              <div className="col-span-6">Warning Letter</div>
              <div className="col-span-3">CFR Violations</div>
              <div className="col-span-2">FD&C Violations</div>
              <div className="col-span-1 text-right">Matches</div>
            </div>
            
            {/* Results */}
            <div className="divide-y divide-white/10">
              {audit.results.map((result, index) => (
                <div 
                  key={generateResultKey(result, index)}
                  className="grid grid-cols-12 gap-3 p-3 hover:bg-white/10 transition-colors"
                >
                  {/* Title with expand/collapse */}
                  <div className="col-span-6">
                    <a 
                      href={result.url} 
                      target="_blank" 
                      rel="noopener noreferrer" 
                      className="text-purple-400 hover:text-purple-300 font-medium block"
                    >
                      {result.title || 'Untitled Warning Letter'}
                    </a>
                  </div>
                  
                  {/* Matched CFR Codes */}
                  <div className="col-span-3 text-xs">
                    {result.matchedCfrCodes && result.matchedCfrCodes.length > 0 ? (
                      <div className="flex flex-wrap gap-1 text-white/80">
                        {result.matchedCfrCodes.map((code, codeIndex) => (
                          <span key={`${index}-cfr-${codeIndex}-${code}`} className="bg-purple-900/30 px-1.5 py-0.5 rounded">
                            {code}
                          </span>
                        ))}
                      </div>
                    ) : (
                      <span className="text-white/40">None</span>
                    )}
                  </div>
                  
                  {/* Matched FD&C Codes */}
                  <div className="col-span-2 text-xs">
                    {result.matchedFdcCodes && result.matchedFdcCodes.length > 0 ? (
                      <div className="flex flex-wrap gap-1 text-white/80">
                        {result.matchedFdcCodes.map((code, codeIndex) => (
                          <span key={`${index}-fdc-${codeIndex}-${code}`} className="bg-purple-900/30 px-1.5 py-0.5 rounded">
                            {code}
                          </span>
                        ))}
                      </div>
                    ) : (
                      <span className="text-white/40">None</span>
                    )}
                  </div>
                  
                  {/* Match count */}
                  <div className="col-span-1 text-right">
                    <span className="bg-purple-500/20 text-purple-300 px-2 py-0.5 rounded-full text-xs">
                      {result.totalMatches || 0}
                    </span>
                  </div>
                  
                  {/* Expandable details - all codes */}
                  <details className="col-span-12 text-xs text-white/60 mt-1">
                    <summary className="cursor-pointer text-white/40 hover:text-white/60 transition-colors">
                      View all violation codes...
                    </summary>
                    <div className="mt-2 grid grid-cols-1 sm:grid-cols-2 gap-2 pl-2 border-l-2 border-white/10">
                      <div>
                        <span className="font-medium">All CFR Codes:</span>
                        <div className="mt-1">{result.cfr_codes || 'None'}</div>
                      </div>
                      <div>
                        <span className="font-medium">All FD&C Codes:</span>
                        <div className="mt-1">{result.fdc_codes || 'None'}</div>
                      </div>
                    </div>
                  </details>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const renderCompareResults = (audit) => {
  if (!audit?.content) {
    return (
      <div className="flex items-center justify-center h-64 text-white/60">
        No comparison data available. Please select two warning letters to compare.
      </div>
    );
  }
  
  return (
    <div className="space-y-6">
      {/* Header with document links */}
      <div className="bg-white/5 rounded-lg p-4">
        <h3 className="text-lg font-semibold text-white mb-4">Warning Letter Comparison</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* First Letter */}
          <div className="bg-white/5 rounded p-3 hover:bg-white/10 transition-colors">
            <h4 className="text-xs uppercase text-white/40 font-medium mb-2">First Letter</h4>
            {audit.firstUrl ? (
              <a href={audit.firstUrl} target="_blank" rel="noopener noreferrer" 
                 className="text-purple-400 hover:text-purple-300 text-sm font-medium break-all">
                {audit.firstUrl.split('/').pop() || audit.firstUrl}
              </a>
            ) : (
              <span className="text-white/60 text-sm">No document selected</span>
            )}
          </div>
          
          {/* Second Letter */}
          <div className="bg-white/5 rounded p-3 hover:bg-white/10 transition-colors">
            <h4 className="text-xs uppercase text-white/40 font-medium mb-2">Second Letter</h4>
            {audit.secondUrl ? (
              <a href={audit.secondUrl} target="_blank" rel="noopener noreferrer"
                 className="text-purple-400 hover:text-purple-300 text-sm font-medium break-all">
                {audit.secondUrl.split('/').pop() || audit.secondUrl}
              </a>
            ) : (
              <span className="text-white/60 text-sm">No document selected</span>
            )}
          </div>
        </div>
      </div>
      
      {/* Analysis Content */}
      <div className="bg-white/5 rounded-lg overflow-hidden">
        <h4 className="text-sm font-semibold text-white/70 p-3 border-b border-white/10 flex items-center">
          <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
          </svg>
          Comparison Analysis
        </h4>
        <div className="p-4">
          <Markdown className="prose prose-sm prose-invert max-w-none">{audit.content}</Markdown>
        </div>
      </div>
      
      {/* Visualizations - side by side if both exist */}
      {(audit.cfrVisualization || audit.fdcVisualization) && (
        <div className={`${audit.cfrVisualization && audit.fdcVisualization ? 'grid grid-cols-1 lg:grid-cols-2 gap-6' : ''}`}>
          {audit.cfrVisualization && renderMermaidChart(audit.cfrVisualization, "CFR Violations Comparison")}
          {audit.fdcVisualization && renderMermaidChart(audit.fdcVisualization, "FD&C Act Violations Comparison")}
        </div>
      )}
      
      {/* Violation Codes Comparison */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* First Letter Codes */}
        <div className="bg-white/5 rounded-lg overflow-hidden">
          <h4 className="text-sm font-semibold text-white/70 p-3 border-b border-white/10">First Letter Violations</h4>
          <div className="p-4 space-y-4">
            {/* CFR Codes */}
            <div>
              <h5 className="text-xs uppercase text-white/40 font-medium mb-2">CFR Codes</h5>
              {Array.isArray(audit.letterACodes?.cfrCodes) && audit.letterACodes.cfrCodes.length > 0 ? (
                <div className="flex flex-wrap gap-2">
                  {audit.letterACodes.cfrCodes.map((code, index) => (
                    <span key={`letter-a-cfr-${index}-${code}`} className="bg-purple-900/30 px-2 py-1 rounded text-sm text-white/80">
                      {code}
                    </span>
                  ))}
                </div>
              ) : (
                <p className="text-white/60 text-sm">None found</p>
              )}
            </div>
            
            {/* FD&C Codes */}
            <div>
              <h5 className="text-xs uppercase text-white/40 font-medium mb-2">FD&C Act Codes</h5>
              {Array.isArray(audit.letterACodes?.fdcCodes) && audit.letterACodes.fdcCodes.length > 0 ? (
                <div className="flex flex-wrap gap-2">
                  {audit.letterACodes.fdcCodes.map((code, index) => (
                    <span key={`letter-a-fdc-${index}-${code}`} className="bg-purple-900/30 px-2 py-1 rounded text-sm text-white/80">
                      {code}
                    </span>
                  ))}
                </div>
              ) : (
                <p className="text-white/60 text-sm">None found</p>
              )}
            </div>
          </div>
        </div>
        
        {/* Second Letter Codes */}
        <div className="bg-white/5 rounded-lg overflow-hidden">
          <h4 className="text-sm font-semibold text-white/70 p-3 border-b border-white/10">Second Letter Violations</h4>
          <div className="p-4 space-y-4">
            {/* CFR Codes */}
            <div>
              <h5 className="text-xs uppercase text-white/40 font-medium mb-2">CFR Codes</h5>
              {Array.isArray(audit.letterBCodes?.cfrCodes) && audit.letterBCodes.cfrCodes.length > 0 ? (
                <div className="flex flex-wrap gap-2">
                  {audit.letterBCodes.cfrCodes.map((code, index) => (
                    <span key={`letter-b-cfr-${index}-${code}`} className="bg-purple-900/30 px-2 py-1 rounded text-sm text-white/80">
                      {code}
                    </span>
                  ))}
                </div>
              ) : (
                <p className="text-white/60 text-sm">None found</p>
              )}
            </div>
            
            {/* FD&C Codes */}
            <div>
              <h5 className="text-xs uppercase text-white/40 font-medium mb-2">FD&C Act Codes</h5>
              {Array.isArray(audit.letterBCodes?.fdcCodes) && audit.letterBCodes.fdcCodes.length > 0 ? (
                <div className="flex flex-wrap gap-2">
                  {audit.letterBCodes.fdcCodes.map((code, index) => (
                    <span key={`letter-b-fdc-${index}-${code}`} className="bg-purple-900/30 px-2 py-1 rounded text-sm text-white/80">
                      {code}
                    </span>
                  ))}
                </div>
              ) : (
                <p className="text-white/60 text-sm">None found</p>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

  return (
    <div className="min-h-screen bg-black text-white">
      <div className="container mx-auto p-8">
        <div className="flex justify-between items-center mb-12">
          <h1 className="text-4xl font-bold tracking-tight">FDA Compliance Analysis</h1>
          
          <Dialog open={openDialog} onOpenChange={setOpenDialog}>
          <div className="flex items-center gap-2">
            <DialogTrigger asChild>
              <Button className="border border-white bg-black text-white hover:bg-white hover:text-black transition-colors duration-300 gap-2">
                <FileText className="w-4 h-4" />
                New Letter Analysis
              </Button>
            </DialogTrigger>
            
            <Button 
              onClick={() => router.push('/audit')}
              className="border border-white bg-black text-white hover:bg-white hover:text-black transition-colors duration-300 gap-2"
            >
              <Plus className="w-4 h-4" />
              New Audit Flow
            </Button>
            <Button 
              onClick={() => router.push('/chat')}
              className="border border-white bg-black text-white hover:bg-white hover:text-black transition-colors duration-300 gap-2"
            >
              <MessageSquare className="w-4 h-4" />
              CFR Consultation
            </Button>
            </div>
            <DialogContent className="bg-black border border-white/10 min-w-[750px]">
              <DialogHeader>
                <DialogTitle className="text-white">New Compliance Analysis</DialogTitle>
              </DialogHeader>
              <Tabs 
                defaultValue="find" 
                className="w-full" 
                onValueChange={(value) => {
                  setAnalysisType(value);
                  // Reset form when changing tabs
                  setWarningLetter("");
                  setWarningLetterUrl("");
                  setSecondLetter("");
                  setSecondLetterUrl("");
                  setCfrSubsection("");
                  setCorrectiveContext("");
                  setDirectiveQuestions([]);
                  setQuestionAnswers([]);
                  setShowQuestions(false);
                  setAdditionalContext("");
                  setSubmissionError("");
                }}
              >
                <TabsList className="grid min-w-[700px] grid-cols-3 h-12">
                  <TabsTrigger value="find" className="data-[state=active]:bg-purple-600">
                    Find Similar
                  </TabsTrigger>
                  <TabsTrigger value="compare" className="data-[state=active]:bg-purple-600">
                    Compare Letters
                  </TabsTrigger>
                </TabsList>

                <TabsContent value="find" className="space-y-4">
                  <div className="space-y-2">
                    <Label className="text-white">Warning Letter URL</Label>
                    <div className="flex gap-2">
                      <Input
                        value={warningLetterUrl}
                        onChange={(e) => setWarningLetterUrl(e.target.value)}
                        placeholder="Enter FDA warning letter URL"
                        className="bg-black border-white/20 text-white"
                      />
                      <Button
                        onClick={() => fetchWarningLetter(warningLetterUrl, setWarningLetter)}
                        disabled={isFetching}
                        className="bg-purple-600 hover:bg-purple-700"
                      >
                        {isFetching ? <Loader2 className="w-4 h-4 animate-spin" /> : "Fetch"}
                      </Button>
                    </div>
                    <Label className="text-white">Or Paste Content Directly</Label>
                    <Textarea
                      value={warningLetter}
                      onChange={(e) => setWarningLetter(e.target.value)}
                      placeholder="Paste warning letter content here..."
                      className="min-h-[200px] bg-black border-white/20 text-white"
                    />
                    <Button 
                      onClick={handleSubmit} 
                      disabled={isLoading || !warningLetter.trim()}
                      className="w-full bg-purple-600 hover:bg-purple-700 text-white"
                    >
                      {isLoading ? <Loader2 className="w-4 h-4 animate-spin mr-2" /> : null}
                      Submit Analysis
                    </Button>
                  </div>
                </TabsContent>

                <TabsContent value="compare" className="space-y-4">
                  <div className="space-y-2">
                    <Label className="text-white">First Warning Letter URL</Label>
                    <Input
                      value={warningLetterUrl}
                      onChange={(e) => setWarningLetterUrl(e.target.value)}
                      placeholder="Enter first FDA warning letter URL"
                      className="bg-black border-white/20 text-white"
                    />
                    <Label className="text-white">Second Warning Letter URL</Label>
                    <Input
                      value={secondLetterUrl}
                      onChange={(e) => setSecondLetterUrl(e.target.value)}
                      placeholder="Enter second FDA warning letter URL"
                      className="bg-black border-white/20 text-white"
                    />
                    <Button
                      onClick={fetchBothLetters}
                      disabled={isFetching}
                      className="bg-purple-600 hover:bg-purple-700 mt-2"
                    >
                      {isFetching ? <Loader2 className="w-4 h-4 animate-spin" /> : "Fetch Both Letters"}
                    </Button>
                    <div className="space-y-2 mt-4">
                      <Label className="text-white">Or Paste Contents Directly</Label>
                      <Textarea
                        value={warningLetter}
                        onChange={(e) => setWarningLetter(e.target.value)}
                        placeholder="Paste first warning letter content here..."
                        className="min-h-[150px] bg-black border-white/20 text-white"
                      />
                      <Textarea
                        value={secondLetter}
                        onChange={(e) => setSecondLetter(e.target.value)}
                        placeholder="Paste second warning letter content here..."
                        className="min-h-[150px] bg-black border-white/20 text-white"
                      />
                    </div>
                    {(warningLetter.trim() && secondLetter.trim()) && (
                      <Button 
                        onClick={handleSubmit} 
                        disabled={isLoading}
                        className="w-full bg-purple-600 hover:bg-purple-700 text-white mt-4"
                      >
                        {isLoading ? <Loader2 className="w-4 h-4 animate-spin mr-2" /> : null}
                        Submit Analysis
                      </Button>
                    )}
                  </div>
                </TabsContent>
              </Tabs>
              {submissionError && (
                <Alert variant="destructive" className="mt-4">
                  <AlertDescription>{submissionError}</AlertDescription>
                </Alert>
              )}
            </DialogContent>
          </Dialog>
        </div>

        <div className="space-y-6">
          {audits.length === 0 ? (
            <div className="flex flex-col items-center justify-center min-h-[400px] border border-white/10 rounded-lg">
              <div className="text-center text-white/60 max-w-md space-y-4">
                <p className="text-2xl font-light mb-2">No audits yet</p>
                <p className="text-base">
                  Click the "New Audit Flow" button to create your first audit.
                  Use "New Letter Ananlysis" to analyze warning letters and compare letters.
                </p>
                <Button 
                  onClick={() => setOpenDialog(true)}
                  className="border border-white bg-black text-white hover:bg-white hover:text-black transition-colors duration-300 gap-2 mt-4"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  Create Your First Letter Analysis
                </Button>
                <div className="flex-col">
                  <Button 
              onClick={() => router.push('/audit')}
              className="border border-white bg-black text-white hover:bg-white hover:text-black transition-colors duration-300 gap-2"
            >
              <Plus className="w-4 h-4" />
              New Audit Flow
            </Button> 
                <Button 
                  onClick={() => router.push('/chat')}
                  className="border border-white bg-black text-white hover:bg-white hover:text-black transition-colors duration-300 gap-2 mt-4 ml-2"
                >
                  <MessageSquare className="w-4 h-4 mr-2" />
                  CFR Consultation Chat
                </Button>
                </div>
              </div>
            </div>
          ) : (
            audits.map((audit) => (
              <Card 
                key={audit.id}
                className="bg-black border border-white/10 p-6"
              >
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <div className="flex items-center gap-2 mb-2">
                      {audit.analysisType === "find" && <Search className="w-4 h-4 text-purple-400" />}
                      {audit.analysisType === "compare" && <ArrowRightLeft className="w-4 h-4 text-purple-400" />}
                      <span className="text-lg font-medium capitalize">{audit.analysisType} Analysis</span>
                    </div>
                    <div className="text-sm text-white/60">
                      {audit.timestamp}
                    </div>
                  </div>
                  <div className="flex gap-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => deleteAudit(audit)}
                      className="text-red-400 hover:text-red-300 hover:bg-red-400/10"
                    >
                      <Trash2 className="w-4 h-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => toggleAudit(audit.id)}
                      className="text-white/60 hover:text-white"
                    >
                      {expandedAudits.has(audit.id) ? (
                        <ChevronUp className="w-4 h-4" />
                      ) : (
                        <ChevronDown className="w-4 h-4" />
                      )}
                    </Button>
                  </div>
                </div>
                
                {expandedAudits.has(audit.id) && (
                  <div className="mt-4">
                    {audit.analysisType === "find" && renderFindResults(audit)}
                    {audit.analysisType === "compare" && renderCompareResults(audit)}
                  </div>
                )}
              </Card>
            ))
          )}
        </div>
      </div>
    </div>
  );
};

export default ComplianceDashboard;